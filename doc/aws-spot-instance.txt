Use the ec2-tasks script with alias ec2 to setup AWS
Create an EC2 instance
1. Create the KERAS security group
export KERAS_SG=$(ec2 csg)

2. Get spot price statistics for p2.xlarge GPU instance
ec2 sps -i p2.xlarge

3. Request a spot instance
# Deep Learning AMI (Ubuntu)
# ec2 rsi -m ami-e4f4c981 -s $KERAS_SG -i p2.xlarge -p YourPrice  # aws ami
ec2 rsi -m ami-d3310db6 -s $KERAS_SG -i p2.xlarge -p YourPrice

4. Display spot requests (optional)
ec2 dsir

5. Display all running instances
ec2 disr

6. Setup INST (specify InstanceId)
export INST_ID=

7. Add shortcut to login to machine
ec2 ssh-init $INST_ID

8. Test login to the instance. Repeat until instance starts.
ssh keras exit

Configure machines using Ansible
1. Setup Ansible
export ANSIBLE_PY=ansible_python_interpreter=$(which python3)
export ANSIBLE_HOST_KEY_CHECKING=False
export ANSIBLE_ROLES_PATH=/vagrant/ansible/external-roles

2. Change to the Ansible playbooks directory
cd /vagrant/ansible/aws

3. Install roles from Ansible Galaxy
ansible-galaxy install -r requirements.yml -p $ANSIBLE_ROLES_PATH

4. Lists the hosts using Ansible (optional)
ansible all --list-hosts -i keras,

6. Connect to all hosts (optional)
ansible all -m ping -i keras, -e $ANSIBLE_PY

7 Run a playbook to update the machines (displays UNREACHABLE when rebooting)
ansible-playbook ubuntu-update.yml -b -i keras, -e $ANSIBLE_PY

8. Repeat previous step until it no longer displayes UNREACHABLE and the Unable
   to lock administration directory is not displayed

9. Install useful utilities
ansible-playbook cli-setup.yml -b -i keras, -e $ANSIBLE_PY

9. Patch Tensorflow conda setup
ansible-playbook patch-conda-setup.yml -b -i keras, -e $ANSIBLE_PY

Run the Jupyter notebook
1. Copy the code to the AWS machine
rsync -avz --exclude '.ipynb_checkpoints' /vagrant/code keras:~

2. Tunnel port for Jupyter notebook
ec2 tunnel $INST_ID

3. Start tmux & Jupyter notebook
tmuxp load ~/code/tmux-jpy-notebook.yml

4. Open your browser to http://192.168.33.10:8888/

5. Enter the token from step where Jupyter is started

Saving changes to the local machine
1. Copy changes from aws to the local machine every 60 seconds
watch -n 60 rsync -avz --exclude '.ipynb_checkpoints' keras:~/code /vagrant

Monitoring GPU
https://github.com/mountassir/gmonitor - 45 stars
https://github.com/Syllo/nvtop - 9 stars

SSH productivity
http://blogs.perl.org/users/smylers/2011/08/ssh-productivity-tips.html
